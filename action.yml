name: 'Maven Jar Publish'
description: 'maven package jar and upload to releases'
author: 'Eric Lam'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  java-version:
    description: 'the java version to build (if not provied, it will use the ${ maven.compiler.target } properties'
    required: false
    default: 'NONE'
  locate:
    description: 'the location of pom.xml (to build)'
    required: false
    default: '.'
  upload-path:
    description: 'the path that jar in (default is ./target)'
    required: false
    default: './target'
  body:
    description: 'The release content'
    required: false
  body-path:
    description: 'The release content by file (if specificed then body will be ignored)'
    required: false
  draft:
    description: 'whether the release is draft'
    required: false
    default: false
  pre-release:
    description: 'whether the release is pre-release'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Setup variables
      id: project
      shell: bash
      run: |
        # fetch maven version
        echo "Fetching maven version..."
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f ${{ inputs.locate }}/pom.xml)
        echo "Fetched success. The Project version is $version"

        # fetch maven build final name
        echo "Fetching maven build final name..."
        artifact=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout -f ${{ inputs.locate }}/pom.xml)
        echo "Fetched success, The project build final name will be $artifact"

        jdk_version=${{ inputs.java-version }}
        if [ $jdk_version = "NONE" ]
        then
          # fetch maven build jdk version
          echo "Not providing jdk version, Fetching maven build jdk version..."
          jdk_version=$(mvn help:evaluate -Dexpression=maven.compiler.target -q -DforceStdout -f ${{ inputs.locate }}/pom.xml)

          if [ ! $? -eq 0 ]
          then
            echo "Cannot find version from either maven.compiler.target or inputs."
            exit 1
          fi

          echo "Fetched success, the project jdk version is $jdk_version"
        fi

        echo "::set-output name=version::$version"
        echo "::set-output name=artifact::$artifact"
        echo "::set-output name=jdk-version::$jdk_version"

    - name: Set up JDK ${{ steps.project.outputs.jdk-version }}
      id: setup-java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ steps.project.outputs.jdk-version }}

    - name: Packaging Jar
      id: packaging-jar
      shell: bash
      run: |
        mvn -B package --file ${{ inputs.locate }}/pom.xml
    - name: Delete existing release and tag
      id: delete-tag-release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      with:
        tag_name: ${{ steps.project.outputs.version }}
        delete_release: true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.project.outputs.version }}
        release_name: Release ${{ github.repository }} v${{ steps.project.outputs.version }}
        body: ${{ inputs.body }}
        body_path: ${{ inputs.body-path }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.pre-release }}

    - name: Upload Release jar
      id: upload-release-asset-jar
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.upload-path }}/${{ steps.project.outputs.artifact }}.jar
        asset_name: ${{ steps.project.outputs.artifact }}.jar
        asset_content_type: application/java-archive

